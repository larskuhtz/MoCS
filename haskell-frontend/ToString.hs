{- *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
 -
 - This copyright notice is auto-generated by ./add-copyright-notice.
 - Additional copyright notices must be added below the last line of this notice.
 -
 - MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "haskell-frontend/ToString.hs".
 - The content of this file is copyright of Saarland University -
 - Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz.
 -
 - This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
 -
 - License: three-clause BSD style license.
 - The license text can be found in the file LICENSE.
 -
 - *** MOCS-COPYRIGHT-NOTICE-END *** -}

{-# LANGUAGE TypeSynonymInstances, OverlappingInstances, UndecidableInstances, IncoherentInstances #-}
module ToString where

import Data.List as List
import Data.Set as Set
import Data.Map as Map

import Foreign.C.Types

class ToString a where
  toString :: a -> String

instance ToString Int where
  toString i = show i

instance ToString Integer where
  toString i = show i

instance ToString Char where
  toString c = [c]

instance ToString String where
  toString s = s

instance ToString a => ToString (Set a) where
  toString s = "{" ++ concat (intersperse "," (List.map toString $ Set.toList s)) ++ "}"

instance (ToString a, ToString b) => ToString (Map a b) where
  toString m = "{" ++ concat (intersperse "," (List.map toString $ Map.toList m)) ++ "}"

instance (ToString a, ToString b) => ToString (a,b) where
  toString p = "(" ++ toString (fst p) ++ "," ++ toString (snd p) ++ ")"

instance (ToString a) => ToString [a] where
  toString l = "[" ++ concat (intersperse "," (List.map toString l)) ++ "]"

instance ToString CLong where
  toString i = show i

--instance (Show a) => ToString a where
--  toString a = show a

