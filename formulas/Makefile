# *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
#
# This copyright notice is auto-generated by ./add-copyright-notice.
# Additional copyright notices must be added below the last line of this notice.
#
# MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "formulas/Makefile".
# The content of this file is copyright of Saarland University -
# Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz.
#
# This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
#
# License: three-clause BSD style license.
# The license text can be found in the file LICENSE.
#
# *** MOCS-COPYRIGHT-NOTICE-END ***

include ../config.make

M:=40

Main:=Main

export PATH:=${PATH}:.
SHELL:=/bin/bash

Xs:=$(shell echo {1..$M})

.PHONY: all clean
all:
	@echo "just doing nothing"

clean:
	rm -rf *.dat

help:
	@echo "all:				does nothing"
	@echo "clean:				remove all dat files"
	@echo "xst/<fname>.srp:		synthesis <fname>"
	@echo "<fname>.dat:			gnuplot data for <fname>"
	@echo "<fname>.vhdl:			vhdl monitor code for <fname>"
	@echo "<fname>.ltl:			instantiate ltl formula from <fname>.tltl"
	@echo "vardi.vdat:      		gnuplot data for vardis formula over number of variables"
	@echo "fair-bounded-request.vdat:      gnuplot data for vardis formula over number of variables"

# takes the current x value
define X
%.$(1).ltl: %.tltl
	cat $$< | ./set-bounds.sh "$$$$((3*$(1)))" "$$$$((2*$(1)))" "$$$$(($(1)))" > $$@
#	cat $$< | ./set-bounds.sh "(infty)" "(infty)" "(infty)" > $$@

%.$(1).tdat: %.$(1).vhdl
	echo -n "$(1) " > $$@
	./cir-size.sh $$< | cut -d ' ' -f 3,5,7 | sed 's/,//g' >> $$@
endef
$(foreach i, $(Xs), $(eval $(call X,$(i))))


%.vhdl: %.ltl
	../haskell-frontend/$(Main) $@ < $<

%.dat: $(foreach i, $(Xs), %.$(i).tdat)
	echo "% M=$(M)" > $@
	cat $^ >> $@

%.mdat: %.$(M).tdat
	cp $< $@

# ##############################################################################
# synthesize

XSTDIR:=xst
VHDLDIR:=../../vhdl

$(XSTDIR)/%.srp: $(XSTDIR)/%.xst.src $(XSTDIR)/%.prj %.vhdl MKXSTDIR
	(cd $(XSTDIR); $(XST) -ifn $*.xst.src -ofn $*.srp)

MKXSTDIR:
	mkdir -p $(XSTDIR)

$(XSTDIR)/%.xst.src: MKXSTDIR
	echo -e "run -ifn $*.prj -top monitor -ifmt MIXED -opt_mode SPEED -opt_level 1 -ofn $*.ngc -p xc5vlx50 -tmpdir tmp\n" > $@

$(XSTDIR)/%.prj: %.vhdl MKXSTDIR
	echo -e " vhdl work \"../$<\"\nvhdl work \"$(VHDLDIR)/pipeline.vhdl\"\nvhdl work \"$(VHDLDIR)/d.vhdl\"\nvhdl work \"$(VHDLDIR)/countdown.vhdl\"\n" > $@

# ##############################################################################
# Twelf formulas:
# stems are f1, f2, f3, ..., f12

TWELF:=$(shell echo {1..12})
TWELF_FORMULAS:=$(TWELF:%=f%)

# ranges over twelf
define T
.INTERMEDIATE: f$(1).tltl
f$(1).tltl: %$(1).tltl: 12-formulas.txt
	grep "^$(1)\. " $$< | sed -e 's/^.*\. //' > $$@;
endef
$(foreach i, $(TWELF), $(eval $(call T,$(i))))

.INTERMEDIATE: $(TWELF:%=f%.dat)
twelf.dat : $(foreach i,$(TWELF), f$(i).dat)
	rm -f $@
	for i in $^ ; do cat $$i >> $@; echo -e "\n" >> $@; done

.INTERMEDIATE: $(TWELF:%=f%.mdat)
twelf.mdat: $(foreach i, $(TWELF), f$(i).mdat)
	rm -f $@
	for i in $^ ; do cat $$i >> $@; done

# ##############################################################################
# Parameterized formulas

#parameter 
V:=60
Vs:=$(shell echo {1..$(V)})

# Value for the bound
vX:=100
$(eval $(call X,$(vX)))

# Generate data ranging over Vs
%.vdat: $(foreach i, $(Vs), %.$(i).$(vX).tdat)
	echo "% vX=$(vX), V=$(V)" > $@
	cat $^ > $@

# $1 generator
# $2 stem
# $3 parameter of generator
define Generate
.INTERMEDIATE: $(2).$(3).tltl
$(2).$(3).tltl: $(1)
	$(1) $(3) > $$@

.INTERMEDIATE: $(2).$(3).$(vX).tdat
$(2).$(3).$(vX).tdat: $(2).$(3).$(vX).vhdl
	echo -n "$(3) " > $$@
	./cir-size.sh $$< | cut -d ' ' -f 3,5,7 | sed 's/,//g' >> $$@
endef
$(foreach i, $(Vs), $(eval $(call Generate,vardigen.sh,vardi,$(i))))
$(foreach i, $(Vs), $(eval $(call Generate,fair-bounded-request-gen.sh,fair-bounded-request,$(i))))


