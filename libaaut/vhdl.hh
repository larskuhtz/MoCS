/* *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
 *
 * This copyright notice is auto-generated by ./add-copyright-notice.
 * Additional copyright notices must be added below the last line of this notice.
 *
 * MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "libaaut/vhdl.hh".
 * The content of this file is copyright of Saarland University -
 * Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz.
 *
 * This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
 *
 * License: three-clause BSD style license.
 * The license text can be found in the file LICENSE.
 *
 * *** MOCS-COPYRIGHT-NOTICE-END *** */

#ifndef _VHDL_HH_
#define _VHDL_HH_

#include "config.h"

#include <boost/lambda/lambda.hpp>
#include <boost/lambda/bind.hpp>
#include <boost/lambda/construct.hpp>

#include "util.hh"
#include "expr.hh"
#include "aa.hh"

// make string concatenation work in boost::lambda
namespace boost { 
    namespace lambda {

        template<>
        struct plain_return_type_2<arithmetic_action<plus_action>, std::string, std::string> { 
           typedef std::string type; 
        };
    }
} 
#define LSTR(x) bind(constructor<std::string>(),x)
#define LSTRCAST(x,y) bind<std::string>(&boost::lexical_cast<std::string,y>,_1)


/*
-- Description: Output-Circuit for the suffix transducer (over the input pipline)
--              The pipline positions are variables of the form p<v>_at_<p>, where
--              <v> is the variable number and <p> the position in the pipline.
--              Position 0 in the pipeline is the current input. Positions 1 .. h
--              are the inputs from 1 .. h steps ago.
--              s0 to s<i> are the bounded formulas. s0_at_<p> is the corresponding
--              output of the suffix circuit.
--
-- Dependencies:
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity suffix_out is
    Port ( p0_at_0 : in  STD_LOGIC;
           p1_at_0 : in STD_LOGIC;
           ...
           pn_at_h : in  STD_LOGIC;

           s0_at_0 : out STD_LOGIC;
           s1_at_0 : out STD_LOGIC;
           ...
           sm_at_h : out STD_LOGIC;
           );
end suffix_out;

architecture Behavioral of suffix_out is
  {for each link (s.id,tid):}
  signal <s.id>_TO_<t.id> : STD_LOGIC;

begin

  process(CLOCK)
  begin
     {for each prop node (v,i):}
     <out_edge_id> <= pv_at_i;

     {for each nprop node (v,i):}
     <out_edge_id> <= not pv_at_i;

     {for each and/or node:}
     <out_edge_id> <= <in_edge_id0> and/or <in_edge_id1>;
  end process;
  {for each out_port of formula j at i:}
  sj_at_i <= <in_edge_id>;

end Behavioral;
*/

RUNTIME_ERROR(expr_type_error);

namespace vhdl
{
    typedef std::list<expr_t> out_ports_t;
    typedef std::list<out_ports_t> out_ports_field_t;

    /* - std::ostream o
     * - std::string name 
     * - std::list<std::list<expr_t> > out_ports  -> for each formula a list of expr for position
     */
};

#if 0
std::ostream& suffix_transducer(std::ostream& o,
                                std::size_t horizon,
                                std::size_t prop_count,
                                std::size_t subf_count,
                                const vhdl::out_ports_field_t& out_ports);

#endif

namespace vhdl {
    std::ostream& monitor(std::ostream& o,
                          std::size_t horizon,                       // the horizon
                          std::size_t prop_count,                    // number of propositions
                          std::size_t subf_count,                    // number suffix-subformulas
                          const expr_t& global_out_expr,             // output expr of the prefix state machine
                          const automaton_t& prefix_state_machine,   // prefix state machine
                          const out_ports_field_t& out_ports);       // field of output expressions from the suffix expr
};

#endif // _VHDL_HH_
