/* *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
 *
 * This copyright notice is auto-generated by ./add-copyright-notice.
 * Additional copyright notices must be added below the last line of this notice.
 *
 * MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "test/exprtest.cc".
 * The content of this file is copyright of Saarland University -
 * Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz.
 *
 * This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
 *
 * License: three-clause BSD style license.
 * The license text can be found in the file LICENSE.
 *
 * *** MOCS-COPYRIGHT-NOTICE-END *** */

#include <fstream>
#include "expr.hh"

prop_t prop(int i)
{
    return prop_t(1,i);
}

int main(int argsc, char ** args)
{
    efac_ptr c = efac::newEfac();

    expr_t p0 = c->mkProp(prop(0));
    expr_t p1 = c->mkProp(prop(1));
    expr_t p2 = c->mkProp(prop(2));

    std::cerr << "check: " << "3 == " << c->size() << std::endl;

    expr_t p0_ = c->mkProp(prop(0));
    expr_t p1_ = c->mkProp(prop(1));
    expr_t p2_ = c->mkProp(prop(2));

    //p0.impl()->debug();
    //p0_.impl()->debug();

    std::cerr << "check: " << "3 == " << c->size() << std::endl;

    expr_t ct = c->mkConst(true);
    expr_t cf = c->mkConst(false);

    std::cerr << "check: " << "5 == " << c->size() << std::endl;

    expr_t ct_ = c->mkConst(true);
    expr_t cf_ = c->mkConst(false);

    std::cerr << "check: " << "5 == " << c->size() << std::endl;

    expr_t np0 = c->mkNProp(prop(0));
    expr_t np1 = c->mkNProp(prop(1));
    expr_t np2 = c->mkNProp(prop(2));

    std::cerr << "check: " << "8 == " << c->size() << std::endl;

    expr_t np0_ = c->mkNProp(prop(0));
    expr_t np1_ = c->mkNProp(prop(1));
    expr_t np2_ = c->mkNProp(prop(2));

    std::cerr << "check: " << "8 == " << c->size() << std::endl;

    expr_t p0_and_p0 = p0 && p0;

    std::cerr << "check: " << "8 == " << c->size() << std::endl;

    expr_t a0 = p0 && p1;

    std::cerr << "check: " << "9 == " << c->size() << std::endl;

    expr_t a1 = p0 && p1 && p2;

    std::cerr << "check: " << "10 == " << c->size() << std::endl;
    
    return 0;
}
