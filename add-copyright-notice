#!/bin/bash

# *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
#
# This copyright notice is auto-generated by ./add-copyright-notice.
# Additional copyright notices must be added below the last line of this notice.
#
# MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "add-copyright-notice".
# The content of this file is copyright of Saarland University -
# Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz <kuhtz@cs.uni-sb.de>.
#
# This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
#
# License: three-clause BSD style license.
# The license text can be found in the file LICENSE.
#
# *** MOCS-COPYRIGHT-NOTICE-END ***

# TODO: Move comment-syntax definitions into Configuration section

# Usage: See usagestring variable defined below.
#
# Check the pattern below in order to make sure that they match
# the files in your project.
#
# WARNING WARNING WARNING: 
# make a backup first (or better: run on a clean working copy).
# Things _will not_ work on the first try!

# NOTE: If you edit this file make sure that the string "copy-right" without
# the hyphen does not occur neither literaly nor with any character converted
# to upper case. Use the variables $COPYR or $CCOPYR instead:

COPYR="copy""right"
CCOPYR="Copy""right"

################################################################################
# Configuration Section
################################################################################
# General Configuration Settings

skip_unknown=true

# please fill out or specify on the command line
tool=MoCS
url=https://lewis.cs.uni-saarland.de/tools/mocs/  
year=2009

# copyrholder=
copyrholder="Saarland University"
# holderaddr=
holderaddr="Reactive Systems Group, Lars Kuhtz"

# choose a license by uncommenting one of the following lines
# license="binaryrestricted"
# license="gpl3"
license="bsd3"
# license="bsd2"

################################################################################
# Check dependencies
declare -A testarray || {
  echo "ERROR: in order to run this program you need a version of Bash that supports associative arrays (e.g. Bash version 4.0)." >&2 ; 
  exit 1; 
}

[ `hg version | head -n 1 | sed -n -e 's/^.*(version \([0-9]\{1,2\}\).*$/\1/p'` -ge '2' ] || {
  echo "ERROR: in order to run this program you need mercurial (hg) of version at least 2.0." >&2 ; 
  exit 1; 
}

sed --version 2>&1 | head -n 1 | grep -q '^GNU' || {
  echo "Error: in order to run this program you need the GNU version of sed." >&2 ;
  exit 1;
}

################################################################################
# Patterns (edit according to the needs of your project)

# Blacklist for files that do not deserve a copy-right notice
BL='(^doxyconfig$)|(docbooksrc/.*\.(pl|dsl|xsl|dtd|cfg)$)|(test/.*/output/.*$)|(^.hgempty$)|(^\.hgsigs$)|(^\.hgtags)|(^dist/.*)|(TODO)|(LICENSE)|(^results/.*)'

# Files that contain the term copy-right (without hyphen, either upper or lower case) and have not a third party copy-right.
THIRDPARTYBL='(^.*\.cabal$)'

# patterns to match on file name
CC='(\.cxx|\.txx|\.hxx|\.h|\.c|\.c0|\.hpp|\.cc|\.tcc|\.hh)$'
TEX='(\.tex)$'
SHELL='((\.sh|\.pl)$)|(/?Makefile)'
XML='(\.xml|\.xsl|\.html|\.xsd|\.docbook)$'
PYTHON='(\.py)$'
VD='(\.vd|\.abs|\.cfg)$'
LTL='(\.ltl|\.tltl)$'
DSL='\.dsl$'
PRED='\.pred$'
TXT='(\.txt$)|(test/.*/.*\.log$)'
HS='(\.hs)$'
VHDL='(\.vhdl)$'
CABAL='(\.cabal)$'
CSS='(\.css)$'

# patterns to match on result of file -b
F_SHELL='^Bourne.*shell'
F_CC='^ASCII C program text'
F_BINARY='^ELF.* executable'

# explicit mapping for files that do not match a pattern
declare -A extra
extra=(
 [.hgignore]='SHELL'
 [.config/functions]='SHELL'
 [add-$COPYR-notice]='SHELL'
 [configure]='SHELL'
 [config.make]='SHELL'
 [README]='TXT'
 [INSTALL]='TXT'
 [TODO]='TXT'
 [formulas/12-formulas.txt]='LTL'
 [Setup.lhs]='HS'
)

################################################################################
# End of Configuration Section
################################################################################
# Main Loop

# command line takes precedence
# FIXME use options here. 
# Provide the possiblity to specify only some of the parameters.
if [ $# -ge 3 ] ; then
    tool=$1; shift
    url=$1; shift
    year=$1; shift
fi

usagestring="Usage: $0 [<tool name> <tool url> <year>] [<file>]"

# check for correct number of arguments (0, 1, 3, or 4)
if [[ $# -gt 1 ]] ; then
    echo "ERROR: illegal number of parameters"
    echo "$usagestring"
    exit 1
fi

# check if everything we need was specified
if [[ -z "$tool" || -z "$url" || -z "$year" ]] ; then
    echo "ERROR: please specify <tool name> <url> and <year>"
    echo "       either by editing $0 or on the command line."
    echo "$usagestring"
    exit 1
fi

# we need to prevent word-spliting to be save on file names with spaces.
IFS='
'

# Get the list of files to work on (newline separated array!)
if [ -n "$1" ] ; then
    echo "Run on single file: $1"
    files=( $1 )
else
    echo "Run on all project files (listed by 'hg manifest')."
    files=( `hg manifest` )
    echo "Number of files: ${#files[@]}." 
fi

# Define some invariant variables
function upper() { echo $@ | tr [a-z] [A-Z]; }
utool=`upper $tool`
NOTEB="$utool-COPY""RIGHT-NOTICE""-BEGIN" # split it in order to avoid matching when running on it self
NOTEE="$utool-COPY""RIGHT-NOTICE""-END"

# Loop on files
for file in "${files[@]}" ; do

################################################################################
# sanity checkes for file

if [ ! -f "$file" ] ; then
    echo "ERROR: $file is not a regular file"
    continue
fi

if [ ! -w "$file" ] ; then
    echo "ERROR: $file can not be written"
    continue
fi

################################################################################
# Blacklisting and detection of 3. party copy-right

# Check for 3. party copy-right notice
# FIXME: we definitely want something more sofisticated here
if [[ ! "$file" =~ $THIRDPARTYBL ]] && grep -q -i -e "$COPYR" "$file" && ! grep -q -i -e "$NOTEB" "$file" ; then
    echo "$file: third party $COPYR"
    continue
fi

# check blacklist
if [[ "$file" =~ $BL ]] ; then
    echo "$file: blacklisted"
    continue
fi

################################################################################
# detect comment style

# give file a try
type=`file -b "$file"`

# techincal stuff
function check()
{
    p=${!1}
    qvar="F_$1"
    q=${!qvar}
    [[ "${extra[$file]}" == "$1" || -z "${extra[$file]}" && ( -n "$p" && "$file" =~ $p ) || ( -n "$q" && "$type" =~ $q ) ]]
}

CS=''
C=''
CE=''
function use()
{
    echo "$file: type $1"
    CS=$2
    C=$3
    CE=$4
}

# comment syntax for the file types: comment start (CC), comment line start (C), comment end (CE)
if check 'CC' ; then use 'CC' '/* ' ' * ' '*/';
elif check 'CSS' ; then use 'CSS' '/* ' ' * ' '*/';
elif check 'TEX' ; then use 'TEX' '% ' '% ' '';
elif check 'SHELL' ; then use 'SHELL' '# ' '# ' '';
elif check 'XML' ; then use 'XML' '<!-- ' '' ' -->';
elif check 'PYTHON' ; then use 'PYTHON' '# ' '# ' '';
elif check 'VD' ; then use 'VD' '// ' '// ' '';
elif check 'PRED' ; then use 'PRED' '// ' '// ' '';
elif check 'DSL' ; then use 'DSL' '; ' '; ' '';
elif check 'TXT' ; then use 'TXT' '' '' '';
elif check 'HS' ; then use 'HS'  '{- ' ' - ' '-}';
elif check 'LTL' ; then use 'LTL'  '-- ' '-- ' '';
elif check 'VHDL' ; then use 'VHDL'  '-- ' '-- ' '';
elif check 'CABAL' ; then use 'CABAL'  '-- ' '-- ' '';
elif check 'BINARY'; then 
    echo "$file: type binary"
    continue
else
    echo "$file: type unknown"
    [ -n "$skip_unknown" ] && continue
    CS=''; C=''; CE=''
fi

################################################################################
# copy-right notice

# the copy-right notice formated to be used with sed (binaryrestricted version)
restrictedtext="\
${CS}*** $NOTEB ***\\
${C}\\
${C}This $COPYR notice is auto-generated by $0.\\
${C}Additional $COPYR notices must be added below the last line of this notice.\\
${C}\\
${C}$tool ($url): \\\"$file\\\".\\
${C}The content of this file is $COPYR of $copyrholder -\\
${C}$CCOPYR (C) $year $copyrholder, $holderaddr.\\
${C}All rights reserved.\\
${C}\\
${C}License information can be found in the file LICENSE.\\
${C}\\
${C}*** $NOTEE *** $CE\\

"

# the copy-right notice formated to be used with sed (BSD2 version)
bsd2text="\
${CS}*** $NOTEB ***\\
${C}\\
${C}This $COPYR notice is auto-generated by $0.\\
${C}Additional $COPYR notices must be added below the last line of this notice.\\
${C}\\
${C}$tool ($url): \\\"$file\\\".\\
${C}The content of this file is $COPYR of $copyrholder -\\
${C}$CCOPYR (C) $year $copyrholder, $holderaddr.\\
${C}\\
${C}This file is part of $tool ($url).\\
${C}\\
${C}License: two-clause BSD style license.\\
${C}The license text can be found in the file LICENSE.\\
${C}\\
${C}*** $NOTEE *** $CE\\

"

# the copy-right notice formated to be used with sed (BSD3 version)
bsd3text="\
${CS}*** $NOTEB ***\\
${C}\\
${C}This $COPYR notice is auto-generated by $0.\\
${C}Additional $COPYR notices must be added below the last line of this notice.\\
${C}\\
${C}$tool ($url): \\\"$file\\\".\\
${C}The content of this file is $COPYR of $copyrholder -\\
${C}$CCOPYR (C) $year $copyrholder, $holderaddr.\\
${C}\\
${C}This file is part of $tool ($url).\\
${C}\\
${C}License: three-clause BSD style license.\\
${C}The license text can be found in the file LICENSE.\\
${C}\\
${C}*** $NOTEE *** $CE\\

"

case "$license" in
binaryrestricted) text="$restrictedtext";;
gpl3)       text="$gpl3text";;
bsd2)       text="$bsd2text";;
bsd3)       text="$bsd3text";;
*)          echo "unknown LICENSE type" && exit 1;;
esac


################################################################################
# insert notice

# Check for existing copy-right notice
if grep -q -i -e "$NOTEB" "$file" ; then
  echo "$file: replace $COPYR"
  sed -i -e "/$NOTEB/a $text
             /$NOTEB/,/$NOTEE/d" "$file"
else

    fl=`head -n 1 "$file"`
    xml_pat='^ *<\?(xml|XML).*\?> *$'
    shell_pat='^ *#\!'
    if [[ ("$fl" =~ $xml_pat) || ("$fl" =~ $shell_pat) ]] ; then
        echo "$file: new $COPYR (first line preserved)"
        sed -i -e "1{a \\

a $text}" "$file" 
    else
        echo "$file: new $COPYR"
        sed -i -e "1{x;i $text ;G}" "$file"
    fi
fi

# Make sure there is exactly one blank line after the notice
sed -i -n -e "/$NOTEE/{p;: lab; n;s/^\\s*$/&/;t lab;i \\

};p" "$file"

# trim trailing white space in copy-right notice
sed -i -e "/$NOTEB/,/$NOTEE/s/\\s*$//" "$file"

done
