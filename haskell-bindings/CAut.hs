{- *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
 -
 - This copyright notice is auto-generated by ./add-copyright-notice.
 - Additional copyright notices must be added below the last line of this notice.
 -
 - MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "haskell-bindings/CAut.hs".
 - The content of this file is copyright of Saarland University -
 - Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz.
 -
 - This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
 -
 - License: three-clause BSD style license.
 - The license text can be found in the file LICENSE.
 -
 - *** MOCS-COPYRIGHT-NOTICE-END *** -}

{-# LANGUAGE ForeignFunctionInterface #-}
module CAut where

import Foreign
import ForeignPtr
import Foreign.C.Types
import Foreign.C.String
import Foreign.Marshal.Array

import CExpr

-- -------------------------------------------------------------------------- --
-- Automaton Context
type CAutCtx = CExprCtx
type AutCtxPtr = ExprCtxPtr
newAutCtx = newExprCtx
mkAutCtx = mkExprCtx

-- -------------------------------------------------------------------------- --
-- Automaton
data CAut = CAut
foreign import ccall "aa.h &free_automaton" free_automaton :: FunPtr (Ptr CAut -> IO ())

foreign import ccall "aa.h simplies_aut" simplies_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h abort_aut" abort_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h conc_aut" conc_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h oconc_aut" oconc_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h kleene_aut" kleene_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h union_aut" union_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h empty_aut" empty_aut :: (Ptr CAutCtx) -> IO (Ptr CAut)

foreign import ccall "aa.h const_aut" const_aut :: (Ptr CAutCtx) -> CInt -> IO (Ptr CAut)
foreign import ccall "aa.h prop_aut" prop_aut :: (Ptr CAutCtx) -> (Ptr CLong) -> CSize -> IO (Ptr CAut)
foreign import ccall "aa.h nprop_aut" nprop_aut :: (Ptr CAutCtx) -> (Ptr CLong) -> CSize -> IO (Ptr CAut)

foreign import ccall "aa.h and_aut" and_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h or_aut" or_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h implies_aut" implies_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h dual_aut" dual_aut :: (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h next_aut" next_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h bnext_aut" bnext_aut :: CInt -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h wnext_aut" wnext_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h bwnext_aut" bwnext_aut :: CInt -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h g_aut" g_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h bg_aut" bg_aut :: CInt -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h strong_bg_aut" strong_bg_aut :: CInt -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h f_aut" f_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h bf_aut" bf_aut :: CInt -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h weak_bf_aut" weak_bf_aut :: CInt -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h until_aut" until_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h buntil_aut" buntil_aut :: CInt -> (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h waitfor_aut" waitfor_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h bwaitfor_aut" bwaitfor_aut :: CInt -> (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h release_aut" release_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h brelease_aut" brelease_aut :: CInt -> (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h strong_release_aut" strong_release_aut :: (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h strong_brelease_aut" strong_brelease_aut :: CInt -> (Ptr CAut) -> (Ptr CAut) -> IO (Ptr CAut)

foreign import ccall "aa.h automaton2dot" automaton_to_dot :: CString -> (Ptr CAut) -> CString -> IO ()
foreign import ccall "aa.h weak_aut" weak_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h universal_aut" universal_aut :: (Ptr CAut) -> IO (Ptr CAut)
foreign import ccall "aa.h get_aut_context" get_aut_context :: (Ptr CAut) -> IO (Ptr CAutCtx)

foreign import ccall "aa.h aut_prefix_rollout" aut_prefix_rollout :: (Ptr CAut) -> CInt -> IO (Ptr CExpr)
foreign import ccall "aa.h aut_suffix_rollout" aut_suffix_rollout :: (Ptr CAut) -> CInt -> IO (Ptr (Ptr CExpr))

foreign import ccall "vhdl.h vhdl_build_monitor" vhdl_build_monitor :: CString -> CInt -> CInt -> CInt -> (Ptr CExpr) -> (Ptr CAut) -> (Ptr (Ptr (Ptr CExpr))) -> IO ()

type AutPtr = ForeignPtr CAut

mkAutPtr :: Ptr CAut -> IO AutPtr
mkAutPtr = newForeignPtr free_automaton

-- precondition: a is nondeterministic
simpliesAut :: AutPtr -> AutPtr -> IO AutPtr
simpliesAut a b = withForeignPtr2 a b simplies_aut >>= mkAutPtr

abortAut :: AutPtr -> AutPtr -> IO AutPtr
abortAut a b = withForeignPtr2 a b abort_aut >>= mkAutPtr

-- precondition: a is nondeterministic
kleeneAut :: AutPtr -> IO AutPtr
kleeneAut a = withForeignPtr a kleene_aut >>= mkAutPtr

unionAut :: AutPtr -> AutPtr -> IO AutPtr
unionAut a b = withForeignPtr2 a b union_aut >>= mkAutPtr

-- precondition: a is nondeterministic
concAut :: AutPtr -> AutPtr -> IO AutPtr
concAut a b = withForeignPtr2 a b conc_aut >>= mkAutPtr

-- precondition: a is nondeterministic
oconcAut :: AutPtr -> AutPtr -> IO AutPtr
oconcAut a b = withForeignPtr2 a b oconc_aut >>= mkAutPtr

emptyAut :: AutCtxPtr -> IO AutPtr
emptyAut ctx = (withForeignPtr ctx $ empty_aut) >>= mkAutPtr

constAut :: AutCtxPtr -> Bool -> IO AutPtr
constAut ctx b = (withForeignPtr ctx $ (\ctx -> const_aut ctx (fromBool b))) >>= mkAutPtr

propAut :: AutCtxPtr -> [CLong] -> IO AutPtr
propAut ctx l = do 
  prop <- newArray l
  ret <- (withForeignPtr ctx (\ctx -> prop_aut ctx prop (int2c $ length l))) >>= mkAutPtr
  free prop
  return ret

npropAut :: AutCtxPtr -> [CLong] -> IO AutPtr
npropAut ctx l = do 
  prop <- newArray l
  ret <- (withForeignPtr ctx (\ctx -> nprop_aut ctx prop (int2c $ length l))) >>= mkAutPtr
  free prop
  return ret

andAut :: AutPtr -> AutPtr -> IO AutPtr
andAut a b = withForeignPtr2 a b and_aut >>= mkAutPtr

orAut :: AutPtr -> AutPtr -> IO AutPtr
orAut a b = withForeignPtr2 a b or_aut >>= mkAutPtr

impliesAut :: AutPtr -> AutPtr -> IO AutPtr
impliesAut a b = withForeignPtr2 a b implies_aut >>= mkAutPtr

dualAut :: AutPtr -> IO AutPtr
dualAut a = withForeignPtr a dual_aut >>= mkAutPtr

-- 
nextAut :: AutPtr -> IO AutPtr
nextAut a = withForeignPtr a next_aut >>= mkAutPtr

bnextAut :: Int -> AutPtr -> IO AutPtr
bnextAut i a = withForeignPtr a (bnext_aut (int2c i)) >>= mkAutPtr

-- 
wnextAut :: AutPtr -> IO AutPtr
wnextAut a = withForeignPtr a wnext_aut >>= mkAutPtr

wbnextAut :: Int -> AutPtr -> IO AutPtr
wbnextAut i a = withForeignPtr a (bwnext_aut (int2c i)) >>= mkAutPtr

-- 
gAut :: AutPtr -> IO AutPtr
gAut a = withForeignPtr a g_aut >>= mkAutPtr

bgAut :: Int -> AutPtr -> IO AutPtr
bgAut i a = withForeignPtr a (bg_aut (int2c i)) >>= mkAutPtr

sbgAut :: Int -> AutPtr -> IO AutPtr
sbgAut i a = withForeignPtr a (strong_bg_aut (int2c i)) >>= mkAutPtr

--
fAut :: AutPtr -> IO AutPtr
fAut a = withForeignPtr a f_aut >>= mkAutPtr

bfAut :: Int -> AutPtr -> IO AutPtr
bfAut i a = withForeignPtr a (bf_aut (int2c i)) >>= mkAutPtr

wbfAut :: Int -> AutPtr -> IO AutPtr
wbfAut i a = withForeignPtr a (weak_bf_aut (int2c i)) >>= mkAutPtr

--
untilAut :: AutPtr -> AutPtr -> IO AutPtr
untilAut a b = withForeignPtr2 a b until_aut >>= mkAutPtr

buntilAut :: Int -> AutPtr -> AutPtr -> IO AutPtr
buntilAut i a b = withForeignPtr2 a b (buntil_aut (int2c i)) >>= mkAutPtr

waitforAut :: AutPtr -> AutPtr -> IO AutPtr
waitforAut a b = withForeignPtr2 a b waitfor_aut >>= mkAutPtr

bwaitforAut :: Int -> AutPtr -> AutPtr -> IO AutPtr
bwaitforAut i a b = withForeignPtr2 a b (bwaitfor_aut (int2c i)) >>= mkAutPtr

--
releaseAut :: AutPtr -> AutPtr -> IO AutPtr
releaseAut a b = withForeignPtr2 a b release_aut >>= mkAutPtr

breleaseAut :: Int -> AutPtr -> AutPtr -> IO AutPtr
breleaseAut i a b = withForeignPtr2 a b (brelease_aut (int2c i)) >>= mkAutPtr

sreleaseAut :: AutPtr -> AutPtr -> IO AutPtr
sreleaseAut a b = withForeignPtr2 a b strong_release_aut >>= mkAutPtr

sbreleaseAut :: Int -> AutPtr -> AutPtr -> IO AutPtr
sbreleaseAut i a b = withForeignPtr2 a b (strong_brelease_aut (int2c i)) >>= mkAutPtr

--
weakAut :: AutPtr -> IO AutPtr
weakAut a = withForeignPtr a weak_aut >>= mkAutPtr

universalAut :: AutPtr -> IO (AutCtxPtr, AutPtr)
universalAut a = do 
  ua <- withForeignPtr a universal_aut >>= mkAutPtr
  ctx <- getAutCtx ua
  return (ctx,ua)

getAutCtx :: AutPtr -> IO AutCtxPtr
getAutCtx a = withForeignPtr a get_aut_context >>= mkAutCtx

autToDot :: String -> AutPtr -> String -> IO ()
autToDot fname a name = do 
  f <- newCString fname
  n <- newCString name
  withForeignPtr a $ (\a -> automaton_to_dot f a n)
  free f
  free n

autPrefixRollout :: Int -> AutPtr -> IO ExprPtr
autPrefixRollout h a =  withForeignPtr a (\x -> aut_prefix_rollout x (int2c h)) >>= mkExprPtr

autSuffixRollout :: Int -> AutPtr -> IO [ExprPtr]
autSuffixRollout b a = do
  arr <- withForeignPtr a (\x -> aut_suffix_rollout x (int2c b))
  ret <- peekArray0 nullPtr arr >>= mapM mkExprPtr
  free arr
  return ret

-- monitor 
--   file 
--   hor 
--   prop_count 
--   subf_count 
--   global_out_expr 
--   prefix_state_machine 
--   oexpr field 
-- TODO c-bindings: all arrays are 0-terminated, gets a c-string as filename

-- make sure the suffix expressions are ordered corresponding to ptabel
vhdlBuildMonitor :: String -> Int -> Int -> Int -> ExprPtr -> AutPtr -> [[ExprPtr]] -> IO ()
vhdlBuildMonitor fname h pc sc po pa so = do
  f <- newCString fname
  ret <- withForeignPtr2List so (\so -> withForeignPtr2 po pa (\po pa -> vhdl_build_monitor f (int2c h) (int2c pc) (int2c sc) po pa so)) 
  free f
  return ret
