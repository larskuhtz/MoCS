{- *** MOCS-COPYRIGHT-NOTICE-BEGIN ***
 -
 - This copyright notice is auto-generated by ./add-copyright-notice.
 - Additional copyright notices must be added below the last line of this notice.
 -
 - MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/): "haskell-bindings/CStateMachine.hs".
 - The content of this file is copyright of Saarland University -
 - Copyright (C) 2009 Saarland University, Reactive Systems Group, Lars Kuhtz.
 -
 - This file is part of MoCS (https://lewis.cs.uni-saarland.de/tools/mocs/).
 -
 - License: three-clause BSD style license.
 - The license text can be found in the file LICENSE.
 -
 - *** MOCS-COPYRIGHT-NOTICE-END *** -}

{-# LANGUAGE ForeignFunctionInterface #-}
module CStateMachine where

import Foreign
import ForeignPtr
import Foreign.C.String

import CExpr
import CAut

-- -------------------------------------------------------------------------- --
-- StateMachine Context
type CStateMachineCtx = CExprCtx
type StateMachineCtxPtr = ExprCtxPtr
newStateMachineCtx = newExprCtx
mkStateMachineCtx = mkExprCtx


-- -------------------------------------------------------------------------- --
-- StateMachine
data CStateMachine = CStateMachine
foreign import ccall "sm.h &free_state_machine" free_state_machine :: FunPtr (Ptr CStateMachine -> IO ())

foreign import ccall "sm.h mk_state_machine" mk_state_machine :: (Ptr CAut) -> IO (Ptr CStateMachine)
foreign import ccall "sm.h state_machine2dot" state_machine_to_dot :: CString -> (Ptr CStateMachine) -> CString -> IO ()
foreign import ccall "sm.h get_sm_context" get_sm_context :: (Ptr CStateMachine) -> IO (Ptr CStateMachineCtx)

type StateMachinePtr = ForeignPtr CStateMachine

mkStateMachinePtr :: Ptr CStateMachine -> IO StateMachinePtr
mkStateMachinePtr = newForeignPtr free_state_machine

mkStateMachine :: AutPtr -> IO StateMachinePtr
mkStateMachine a = withForeignPtr a mk_state_machine >>= mkStateMachinePtr

getStateMachineCtx :: StateMachinePtr -> IO StateMachineCtxPtr
getStateMachineCtx a = withForeignPtr a get_sm_context >>= mkStateMachineCtx

smToDot :: String -> StateMachinePtr -> String -> IO ()
smToDot fname a name = do 
  f <- newCString fname
  n <- newCString name
  withForeignPtr a $ (\a -> state_machine_to_dot f a n)
  free f
  free n

